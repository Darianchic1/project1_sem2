"""–§–∞–π–ª –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""

import streamlit as st
import pandas as pd
import plotly.express as px


st.set_page_config(
    page_title="–ê–≤–∏–∞-–¥–∞—à–±–æ—Ä–¥",
    page_icon="‚úàÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)


# –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
@st.cache_data
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    return pd.read_csv("data/final_dataframe.csv")

@st.cache_data
def get_coordinates():
    """–°–ª–æ–≤–∞—Ä—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤"""
    return {
        '–ö–æ–ª–æ–º–±–æ': [6.9271, 79.8612],
        '–ú–∞–ª–µ': [4.1755, 73.5093],
        '–¢–∞—à–∫–µ–Ω—Ç': [41.2995, 69.2401],
        '–ë–∞–Ω–≥–∫–æ–∫': [13.7563, 100.5018],
        '–ë–µ–ª–≥—Ä–∞–¥': [44.7866, 20.4489],
        '–î—É–±–∞–π': [25.276987, 55.296249],
        '–°—Ç–∞–º–±—É–ª': [41.0082, 28.9784],
        '–ú–∞–Ω–∏–ª–∞': [14.5995, 120.9842],
        '–ü–æ–¥–≥–æ—Ä–∏—Ü–∞': [42.4411, 19.2636],
        '–ú–∞–≤—Ä–∏–∫–∏–π': [-20.348404, 57.552152],
        '–¢–æ–∫–∏–æ': [35.6762, 139.6503],
        '–í–∞—Ä–∞–¥–µ—Ä–æ': [23.1460, -81.2752]
    }

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_data()
city_coords = get_coordinates()


# –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–û–ï –ú–ï–ù–Æ
st.sidebar.title("–ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
pages = {
    "–ì–ª–∞–≤–Ω–∞—è": "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–µ–ª–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
    "–î–∞–Ω–Ω—ã–µ": "–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
    "EDA": "–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
    "–¢—Ä–µ–Ω–¥—ã": "–ê–Ω–∞–ª–∏–∑ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π",
    "–í—ã–≤–æ–¥—ã": "–ò—Ç–æ–≥–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
}
page = st.sidebar.radio("–†–∞–∑–¥–µ–ª—ã:", list(pages.keys()))


# –°–û–î–ï–†–ñ–ê–ù–ò–ï –°–¢–†–ê–ù–ò–¶
if page == "–ì–ª–∞–≤–Ω–∞—è":
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    st.title("–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –º–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ 2025")
    
    # –ë–ª–æ–∫ 1: –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.container():
        st.header("üìå –û –¥–∞–Ω–Ω—ã—Ö")
        st.markdown("""
         **–î–∞—Ç–∞—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:**  
        ‚Ä¢ 12 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ 43 –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏ –∏ –º–∏—Ä–∞  
        ‚Ä¢ –¶–µ–Ω—ã –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –ø–µ—Ä–∏–æ–¥ –º–∞–π—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ 2025  
        ‚Ä¢ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–¥—ã—Ö–∞: –ø–ª—è–∂–Ω—ã–π, –≥–æ—Ä–æ–¥—Å–∫–æ–π, –∫—É–ª—å—Ç—É—Ä–Ω—ã–π 
        """)

        st.markdown("""
        ### –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å **AviaSales** ‚Äî –≤–µ–¥—É—â–µ–≥–æ –º–µ—Ç–∞–ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤, 
        –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è 800+ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π –∏ 200+ ticket-–∞–≥–µ–Ω—Ç—Å—Ç–≤. 
        """)
        
        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", "18 200 —Ä—É–±")
        with col2:
            st.metric("–°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π –±–∏–ª–µ—Ç", "54 792 —Ä—É–±")
        with col3:
            st.metric("–°–∞–º—ã–π –±—é–¥–∂–µ—Ç–Ω—ã–π", "1 057 —Ä—É–±")
    
    # –ë–ª–æ–∫ 2: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    with st.container():
        st.map(pd.DataFrame({
        "lat": [6.9271, 4.1755, 41.2995, 25.2048],  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        "lon": [79.8612, 73.5093, 69.2401, 55.2708],
        "city": ["–ö–æ–ª–æ–º–±–æ", "–ú–∞–ª–µ", "–¢–∞—à–∫–µ–Ω—Ç", "–î—É–±–∞–π"]
    }), zoom=1)
    
    # –ë–ª–æ–∫ 3: –¶–µ–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    with st.container():
        st.header("–ö–ª—é—á–µ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        tabs = st.tabs(["–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–¶–µ–Ω—ã", "–ì–æ—Ä–æ–¥–∞"])
        with tabs[0]:
            st.markdown("- –ö–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ?  \n- –ö–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ?  ")
        with tabs[1]:
            st.markdown("- –í–ª–∏—è–µ—Ç –ª–∏ —Ç–∏–ø –æ—Ç–¥—ã—Ö–∞ –Ω–∞ —Ü–µ–Ω—É? \n-  –ö–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ/–¥–µ—à—ë–≤—ã–µ?  ")
        with tabs[2]:
            st.markdown("- –ó–∞–≤–∏—Å–∏—Ç –ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞?\n- –ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–ª—ë—Ç—ã?\n- –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–ø—Ä–æ—Å–∞")

    # –ë–ª–æ–∫ 4: –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    with st.container():
        st.subheader("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df.sample(5), height=200)

elif page == "–î–∞–Ω–Ω—ã–µ":
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.header("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    with st.expander("–§–∏–ª—å—Ç—Ä—ã", expanded=True):
        min_price = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", float(df["price"].min()), float(df["price"].max()), float(df["price"].min()))
        filtered_df = df[df["price"] >= min_price]
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    st.dataframe(filtered_df, height=400, use_container_width=True)

    
    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    st.header("–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

    # 1. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    st.subheader("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    metric_col1, metric_col2, metric_col3 = st.columns(3)
    with metric_col1:
        st.metric(
            label="–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", 
            value=len(df),
            help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö"
        )
    with metric_col2:
        st.metric(
            label="–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤—ã–ª–µ—Ç–∞", 
            value=df["origin_name"].nunique(),
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        )
    with metric_col3:
        avg_price = df['price'].mean()
        st.metric(
            label="–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", 
            value=f"{avg_price:,.2f} —Ä—É–±",
            help=f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ (–æ—Ç {df['price'].min():,.0f} –¥–æ {df['price'].max():,.0f} —Ä—É–±)"
        )

    # 2. –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω
    st.subheader("–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –±–∏–ª–µ—Ç—ã")

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    dist_tab1, dist_tab2 = st.tabs(["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å –±–æ–∫—Å–∏–≥—Ä–∞–º–º–æ–π", "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"])

    with dist_tab1:
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å –±–æ–∫—Å–∏–≥—Ä–∞–º–º–æ–π
        fig = px.histogram(
            df,
            x="price",
            nbins=30,
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã",
            labels={"price": "–¶–µ–Ω–∞ (—Ä—É–±)", "count": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤"},
            color_discrete_sequence=["#1f77b4"],
            opacity=0.8,
            marginal="box",
            hover_data=["origin_name", "destination_city"]
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        fig.update_layout(
            bargap=0.1,
            xaxis_title="–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ (—Ä—É–±)",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤",
            hovermode="x unified",
            plot_bgcolor="rgba(0,0,0,0)",
            xaxis=dict(showgrid=True, gridcolor="lightgray"),
            yaxis=dict(showgrid=True, gridcolor="lightgray")
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        fig.add_vline(
            x=avg_price, 
            line_dash="dot",
            annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {avg_price:,.0f} —Ä—É–±",
            annotation_position="top"
        )
        
        st.plotly_chart(fig, use_container_width=True)

    with dist_tab2:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–æ–∫
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            ### –ú–æ–¥–∞
            **{} —Ä—É–±**  
            –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∞—è—Å—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞
            """.format(df["price"].mode()[0]))
        
        with col2:
            st.markdown("""
            ### –ú–µ–¥–∏–∞–Ω–∞
            **{} —Ä—É–±**  
            50% –±–∏–ª–µ—Ç–æ–≤ –¥–µ—à–µ–≤–ª–µ —ç—Ç–æ–π —Ü–µ–Ω—ã
            """.format(df["price"].median()))
        
        with col3:
            st.markdown("""
            ### –°—Ä–µ–¥–Ω–µ–µ
            **{} —Ä—É–±**  
            –û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ –≤—Å–µ–º –±–∏–ª–µ—Ç–∞–º
            """.format(round(df["price"].mean(), 2)))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        st.markdown("""
        #### –î—Ä—É–≥–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
        - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:** {:.2f} —Ä—É–±
        - **–†–∞–∑–º–∞—Ö —Ü–µ–Ω:** –æ—Ç {:,} –¥–æ {:,} —Ä—É–±
        - **–ö–≤–∞—Ä—Ç–∏–ª–∏:** 
        - Q1 (25%): {:,} —Ä—É–± 
        - Q3 (75%): {:,} —Ä—É–±
        """.format(
            df["price"].std(),
            df["price"].min(),
            df["price"].max(),
            df["price"].quantile(0.25),
            df["price"].quantile(0.75)
        ))

# 3. –†–∞–∑–¥–µ–ª ¬´EDA¬ª
elif page == "EDA":
    st.header("–ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    # 1. –ö–∞—Ä—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å plotly
    st.subheader("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    
    # –°–æ–∑–¥–∞—ë–º DataFrame —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    city_coords = {
        '–ö–æ–ª–æ–º–±–æ': [6.9271, 79.8612],
        '–ú–∞–ª–µ': [4.1755, 73.5093],
        '–¢–∞—à–∫–µ–Ω—Ç': [41.2995, 69.2401],
        '–ë–∞–Ω–≥–∫–æ–∫': [13.7563, 100.5018],
        '–ë–µ–ª–≥—Ä–∞–¥': [44.7866, 20.4489],
        '–î—É–±–∞–π': [25.276987, 55.296249],
        '–°—Ç–∞–º–±—É–ª': [41.0082, 28.9784],
        '–ú–∞–Ω–∏–ª–∞': [14.5995, 120.9842],
        '–ü–æ–¥–≥–æ—Ä–∏—Ü–∞': [42.4411, 19.2636],
        '–ú–∞–≤—Ä–∏–∫–∏–π': [-20.348404, 57.552152],
        '–¢–æ–∫–∏–æ': [35.6762, 139.6503],
        '–í–∞—Ä–∞–¥–µ—Ä–æ': [23.1460, -81.2752]
    }
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    city_stats = df.groupby(['destination_city', 'destination_country']).agg(
        avg_price=('price', 'mean'),
        flight_count=('price', 'count')
    ).reset_index()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    city_stats['lat'] = city_stats['destination_city'].map(lambda x: city_coords.get(x, [0,0])[0])
    city_stats['lon'] = city_stats['destination_city'].map(lambda x: city_coords.get(x, [0,0])[1])
    
    # –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É
    fig = px.scatter_geo(city_stats,
                        lat='lat',
                        lon='lon',
                        color='avg_price',
                        size='flight_count',
                        hover_name='destination_city',
                        hover_data=['destination_country', 'avg_price', 'flight_count'],
                        projection='natural earth',
                        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–π—Å–æ–≤',
                        color_continuous_scale='Viridis')
    
    st.plotly_chart(fig, use_container_width=True)
    
    # 2. –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã –ø–æ –∫–∞—Ä—Ç–µ
    st.markdown("""
    ### –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:
    
    **1. –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Ç–µ—Ä—ã:**
    - **–ê–∑–∏—è/–û–∫–µ–∞–Ω–∏—è:** 60% –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã (15-25 —Ç—ã—Å. —Ä—É–±)
    - **–ï–≤—Ä–æ–ø–∞:** 25% –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –±—é–¥–∂–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–¢—É—Ä—Ü–∏—è, –°–µ—Ä–±–∏—è)
    - **–ê–º–µ—Ä–∏–∫–∞/–ê—Ñ—Ä–∏–∫–∞:** 15%, –ø—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç (–ö—É–±–∞, –ú–∞–≤—Ä–∏–∫–∏–π)
    
    **2. –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è:**
    - –ë–ª–∏–∂–Ω–µ–µ –∑–∞—Ä—É–±–µ–∂—å–µ (–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω, –û–ê–≠) ‚Äî –æ—Ç 5 –¥–æ 15 —Ç—ã—Å. —Ä—É–±
    - –î–∞–ª—å–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ø–ø–æ–Ω–∏—è, –ö—É–±–∞) ‚Äî –æ—Ç 25 —Ç—ã—Å. —Ä—É–±
    """)

    # 3. –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –ø–æ –≥–æ—Ä–æ–¥–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
    st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –≥–æ—Ä–æ–¥–∞–º –≤—ã–ª–µ—Ç–∞ (3+ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π)")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ —Å 3+ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    city_counts = df['origin_name'].value_counts()
    valid_cities = city_counts[city_counts >= 3].index.tolist()
    filtered_df = df[df['origin_name'].isin(valid_cities)]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
    avg_prices = filtered_df.groupby('origin_name', as_index=False)['price'].mean()
    min_price = avg_prices['price'].min()
    max_price = avg_prices['price'].max()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    fig = px.bar(
        avg_prices.sort_values('price'),
        x='origin_name',
        y='price',
        color='price',
        color_continuous_scale=[(0, '#1f77b4'), (1, '#ff7f0e')],
        range_color=[min_price, max_price],
        title='–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ –∏–∑ –≥–æ—Ä–æ–¥–æ–≤ —Å 3+ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏',
        labels={'origin_name': '–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (—Ä—É–±)'},
        text_auto='.0f',
        height=500
    )
    
    # –í—ã–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏—è
    fig.update_traces(
        marker_line_color='rgba(0,0,0,0.7)',
        marker_line_width=1.5,
        textposition='outside'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    fig.update_layout(
        xaxis_tickangle=-45,
        yaxis_range=[min_price*0.9, max_price*1.1],
        hovermode='x',
        coloraxis_showscale=False,
        plot_bgcolor='rgba(0,0,0,0)'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # 4. –í—ã–≤–æ–¥—ã
    st.markdown("""
    ### –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:
    
    **1. –ú–æ—Å–∫–≤–∞** (–ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ):
    - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: **{} —Ä—É–±** (–Ω–∞ 25-40% –Ω–∏–∂–µ, —á–µ–º –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö)
    - –ü—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –≤ {} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    - **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ –ø–µ—Ä–µ—Å–∞–¥–æ—á–Ω—ã–π —Ö–∞–±
    
    **2. –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –ò—Ä–∫—É—Ç—Å–∫ –∏ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫** (—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å):
    ```python
    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞:
    {}
    ```
    - –í—Å–µ–≥–æ {} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –ê–∑–∏—è)
    - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: **{} —Ä—É–±** (–¥–µ—à–µ–≤–ª–µ –ú–æ—Å–∫–≤—ã –Ω–∞ –∞–∑–∏–∞—Ç—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    
    **3. –°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –≥–æ—Ä–æ–¥–∞**:
    - {}: **{} —Ä—É–±** (+{}% –∫ –ú–æ—Å–∫–≤–µ)
    - –ü—Ä–∏—á–∏–Ω—ã: –º–∞–ª–æ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤, —Å–µ–∑–æ–Ω–Ω—ã–π —Å–ø—Ä–æ—Å
    """.format(
        int(avg_prices[avg_prices['origin_name'] == '–ú–æ—Å–∫–≤–∞']['price'].values[0]),
        city_counts['–ú–æ—Å–∫–≤–∞'],
        filtered_df[filtered_df['origin_name'] == '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'][['destination_city', 'price']].to_string(index=False),
        city_counts['–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'],
        int(avg_prices[avg_prices['origin_name'] == '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫']['price'].values[0]),
        avg_prices.sort_values('price', ascending=False).iloc[0]['origin_name'],
        int(avg_prices.sort_values('price', ascending=False).iloc[0]['price']),
        int((avg_prices.sort_values('price', ascending=False).iloc[0]['price'] / min_price - 1) * 100)
    ))

    # 4. –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –ø–æ –≥–æ—Ä–æ–¥–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ç–∏–ø–∞–º –æ—Ç–¥—ã—Ö–∞
    st.header("–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –ø–æ –≥–æ—Ä–æ–¥–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ç–∏–ø–∞–º –æ—Ç–¥—ã—Ö–∞")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤ —Å 3+ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    city_counts = df['origin_name'].value_counts()
    filtered_df = df[df['origin_name'].isin(city_counts[city_counts > 2].index)]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    fig = px.bar(
        filtered_df,
        x='origin_name',
        y='price',
        color='Type_of_rest',
        barmode='group',
        title='–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ç–∏–ø–∞–º –æ—Ç–¥—ã—Ö–∞',
        labels={
            'origin_name': '–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'price': '–¶–µ–Ω–∞ (—Ä—É–±)',
            'Type_of_rest': '–¢–∏–ø –æ—Ç–¥—ã—Ö–∞'
        },
        color_discrete_sequence=px.colors.qualitative.Set2,
        hover_data=['destination_city']
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    fig.update_layout(
        xaxis_tickangle=-45,
        yaxis_gridcolor='lightgray',
        plot_bgcolor='rgba(0,0,0,0)',
        legend_title_text='–¢–∏–ø –æ—Ç–¥—ã—Ö–∞',
        hovermode='x unified',
        height=600
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –ª–∏–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    for rest_type in filtered_df['Type_of_rest'].unique():
        mean_price = filtered_df[filtered_df['Type_of_rest'] == rest_type]['price'].mean()
        fig.add_hline(
            y=mean_price, 
            line_dash='dot',
            line_color=px.colors.qualitative.Set2[list(filtered_df['Type_of_rest'].unique()).index(rest_type)],
            annotation_text=f'–°—Ä–µ–¥–Ω–µ–µ {rest_type}: {mean_price:,.0f} —Ä—É–±',
            annotation_position='top right'
        )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # 5. –í—ã–≤–æ–¥—ã
    st.subheader("–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:")
    dist_tab1, dist_tab2 = st.tabs(["–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è", "–†–∞–∑–Ω–∏—Ü–∞ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–¥—ã—Ö–∞"])

    with dist_tab1:
        st.markdown("""
        ### –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è:
        - –°–∞–º—ã–µ –≤—ã—Å–æ–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã –≤ **–ú–∏–Ω—Å–∫–µ** –∏ **–ö–∞–∑–∞–Ω–∏** (–¥–æ {:,} —Ä—É–±) –∏–∑-–∑–∞:
            - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–π—Å–æ–≤
            - –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        - –°–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã –≤ **–ú–æ—Å–∫–≤–µ** –∏ **–ò—Ä–∫—É—Ç—Å–∫–µ** (–æ—Ç {:,} —Ä—É–±) –±–ª–∞–≥–æ–¥–∞—Ä—è:
            - –í—ã—Å–æ–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π
            - –í—ã–≥–æ–¥–Ω–æ–º—É –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é """.format(
            filtered_df['price'].max(),
            filtered_df['price'].min()
        ))

    with dist_tab2:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –≤–∏–¥–µ –∫–æ–ª–æ–Ω–æ–∫
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            ### –ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö:
            - –î–æ—Ä–æ–∂–µ –≤ –ö–∞–∑–∞–Ω–∏ –∏ –ú–∏–Ω—Å–∫–µ
            - –î–µ—à–µ–≤–ª–µ –≤ –î—É–±–∞–µ –∏ –°—Ç–∞–º–±—É–ª–µ
            """)
        
        with col2:
            st.markdown("""
            ### –ö—É–ª—å—Ç—É—Ä–Ω—ã–π –æ—Ç–¥—ã—Ö:
            - –°–∞–º—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –°—Ç–∞–º–±—É–ª–µ –∏ –°–æ—á–∏
            - –î–æ—Ä–æ–≥–∏–µ –±–∏–ª–µ—Ç—ã –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞
            """)
        
        with col3:
            st.markdown("""
            ### –ì–æ—Ä–æ–¥—Å–∫–æ–π –æ—Ç–¥—ã—Ö:
            - –î–µ—à–µ–≤–ª–µ –≤ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–µ –∏ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ
            - –í –ò—Ä–∫—É—Ç—Å–∫–µ —Ü–µ–Ω—ã –Ω–∏–∑–∫–∏–µ –∏–∑-–∑–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –ê–∑–∏–∏""")
    
    
    st.header("üåç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—Ç–¥—ã—Ö–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–æ–≤
    def get_geo_group(city):
        groups = {
            '–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫': ['–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫'],
            '–£—Ä–∞–ª': ['–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–£—Ñ–∞', '–¢—é–º–µ–Ω—å', '–ü–µ—Ä–º—å', '–ß–µ–ª—è–±–∏–Ω—Å–∫'],
            '–°–∏–±–∏—Ä—å': ['–ò—Ä–∫—É—Ç—Å–∫', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–û–º—Å–∫', '–¢–æ–º—Å–∫', '–ë–∞—Ä–Ω–∞—É–ª'],
            '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –†–æ—Å—Å–∏—è': ['–ú–æ—Å–∫–≤–∞', '–ö–∞–∑–∞–Ω—å', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–°–∞–º–∞—Ä–∞', '–í–æ—Ä–æ–Ω–µ–∂',
                                  '–Ø—Ä–æ—Å–ª–∞–≤–ª—å', '–¢—É–ª–∞', '–†—è–∑–∞–Ω—å', '–°–º–æ–ª–µ–Ω—Å–∫', '–¢–≤–µ—Ä—å', '–ò–≤–∞–Ω–æ–≤–æ'],
            '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥': ['–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', '–ú—É—Ä–º–∞–Ω—Å–∫', '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫',
                            '–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫', '–í–µ–ª–∏–∫–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ü—Å–∫–æ–≤'],
            '–Æ–≥ –†–æ—Å—Å–∏–∏': ['–°–æ—á–∏', '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–ú–∞—Ö–∞—á–∫–∞–ª–∞', '–ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã',
                         '–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑', '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å'],
            '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ': ['–î—É–±–∞–π', '–ê–±—É-–î–∞–±–∏', '–ú–∞–ª–µ', '–ë–∞–Ω–≥–∫–æ–∫', '–ö–æ–ª–æ–º–±–æ', '–°–∏–Ω–≥–∞–ø—É—Ä',
                             '–ú–∏–Ω—Å–∫', '–ü—Ö—É–∫–µ—Ç', '–°—Ç–∞–º–±—É–ª', '–≠–ª—å-–ù–∏–¥–æ', '–°–µ–±—É', '–ö–∞—Ç–∏–∫–ª–∞–Ω',
                             '–ì–æ–Ω–∫–æ–Ω–≥', '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞', '–ë–∞–∫—É', '–í–µ–Ω–∞', '–ë–µ–ª–≥—Ä–∞–¥', '–ê—Å—Ç–∞–Ω–∞',
                             '–ü–µ–∫–∏–Ω', '–®–∞–Ω—Ö–∞–π', '–ö–∞–Ω–∫—É–Ω', '–ü—É–Ω—Ç–∞-–ö–∞–Ω–∞', '–°–∞–Ω—Ç–æ-–î–æ–º–∏–Ω–≥–æ', '–ú–µ—Ö–∏–∫–æ']
        }
        for group, cities in groups.items():
            if city in cities:
                return group
        return '–î—Ä—É–≥–∏–µ'

    # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
    df['geo_group'] = df['origin_name'].apply(get_geo_group)
    
    # 3. –°–æ–∑–¥–∞–µ–º –∫—Ä–æ—Å—Å-—Ç–∞–±–ª–∏—Ü—É
    cross_tab = pd.crosstab(
        index=df['geo_group'],
        columns=df['Type_of_rest'],
        normalize='index'
    ).round(3) * 100
    
    # 4. –°—Ç—Ä–æ–∏–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
    fig = px.imshow(
        cross_tab,
        labels=dict(x="–¢–∏–ø –æ—Ç–¥—ã—Ö–∞", y="–†–µ–≥–∏–æ–Ω", color="–î–æ–ª—è, %"),
        color_continuous_scale='YlGnBu',
        text_auto=".1f",
        aspect="auto"
    )
    
    # 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    fig.update_layout(
        title="–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –æ—Ç–¥—ã—Ö–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (%)",
        xaxis_title="–¢–∏–ø –æ—Ç–¥—ã—Ö–∞",
        yaxis_title="–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∞",
        height=600,
        coloraxis_colorbar=dict(
            title="–î–æ–ª—è, %",
            ticksuffix="%"
        )
    )
    
    # 6. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    st.plotly_chart(fig, use_container_width=True)
    
    # 8. –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
    st.markdown("""
    ### üîç –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:
    
    **1. –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–¥—ã—Ö–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:**
    ```python
    {}
    ```
    
    **2. –ù–∞–∏–±–æ–ª—å—à–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:**
    - **{}** - {:.1f}% –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç {}
    - **{}** - {:.1f}% –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç {}
    
    **3. –°–∞–º—ã–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:**
    {}
    """.format(
cross_tab.idxmax(axis=1).to_string(),
cross_tab.max(axis=1).idxmax(),
cross_tab.max(axis=1).max(),
cross_tab.idxmax(axis=1)[cross_tab.max(axis=1).idxmax()],
cross_tab.max(axis=1).idxmin(),
cross_tab.max(axis=1).min(),
cross_tab.idxmax(axis=1)[cross_tab.max(axis=1).idxmin()],
", ".join(cross_tab[(cross_tab.max(axis=1) - cross_tab.min(axis=1)) < 15].index.tolist())
))

elif page == "–¢—Ä–µ–Ω–¥—ã":
    # –¶–µ–Ω–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã
    city_counts = df['origin_name'].value_counts()
    filtered_df = df[df['origin_name'].isin(city_counts[city_counts > 2].index)]

    st.header("–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤")
    selected_city = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            filtered_df['origin_name'].unique()
        ) 
    city_data = filtered_df[filtered_df['origin_name'] == selected_city]
    col1, col2 = st.columns(2)
    with col1:
        st.markdown(f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {selected_city}:**")
        st.dataframe(city_data.groupby('Type_of_rest')['price'].describe().style.format('{:.1f}'))
        
    with col2:
        st.markdown("**–¢–æ–ø –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:**")
        st.dataframe(city_data.sort_values('price', ascending=False).head(3)[['destination_city', 'Type_of_rest', 'price']])

    #–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ü–µ–Ω –ø–æ –≥–æ—Ä–æ–¥–∞–º
    st.header("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ü–µ–Ω")
    compare_cities = st.multiselect(
    "–°—Ä–∞–≤–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    options=df['origin_name'].unique(),
    default=["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]
    )
    comparison_df = df[df['origin_name'].isin(compare_cities)].groupby('origin_name').agg({
        'price': ['mean', 'min', 'max'],
        'destination_city': 'nunique'
    })
    st.dataframe(comparison_df.style.format('{:.1f}'))


    #–ê–Ω–∞–ª–∏–∑ "—á—Ç–æ –µ—Å–ª–∏" —Å –∫–Ω–æ–ø–∫–æ–π
    st.subheader("–°—Ü–µ–Ω–∞—Ä–∏–π '–ß—Ç–æ –µ—Å–ª–∏'")
    base_city = st.selectbox("–ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞", df['origin_name'].unique())
    budget = st.slider("–í–∞—à –±—é–¥–∂–µ—Ç (—Ä—É–±)", min_value=1000, value=20000)
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"):
        result_df = df[(df['origin_name'] == base_city) & (df['price'] <= budget)]
        st.write(f"–ù–∞–π–¥–µ–Ωo {len(result_df)} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
        st.dataframe(result_df)

    #–¢–æ–ø-5 —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    st.subheader("–°–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    col1, col2 = st.columns(2)
    with col1:
        city_filter = st.selectbox("–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", ["–í—Å–µ"] + list(df['origin_name'].unique()))
    with col2:
        rest_type_filter = st.selectbox("–¢–∏–ø –æ—Ç–¥—ã—Ö–∞", ["–í—Å–µ"] + list(df['Type_of_rest'].unique()))

    filtered_df = df
    if city_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df['origin_name'] == city_filter]
    if rest_type_filter != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df['Type_of_rest'] == rest_type_filter]

    top5 = filtered_df.sort_values('price').head(5)
    st.dataframe(top5)

# 5. –†–∞–∑–¥–µ–ª ¬´–í—ã–≤–æ–¥—ã¬ª
elif page == "–í—ã–≤–æ–¥—ã":
    st.header("–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    # 1. –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã (–≤ –≤–∏–¥–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞)
    with st.expander("üîç –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞", expanded=True):
        st.markdown("""
        ### –î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω:
        - **–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞:** 18 000 —Ä—É–± (—Ä–∞–∑–±—Ä–æ—Å –æ—Ç 5 000 –¥–æ 46 000 —Ä—É–±)
        - **–°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:** –ö—É–±–∞ (–í–∞—Ä–∞–¥–µ—Ä–æ), –ú–∞–≤—Ä–∏–∫–∏–π, –ú–∞–ª—å–¥–∏–≤—ã
        - **–ë—é–¥–∂–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:** –¢—É—Ä—Ü–∏—è (–°—Ç–∞–º–±—É–ª), –û–ê–≠ (–î—É–±–∞–π), –¢–∞–∏–ª–∞–Ω–¥ (–ë–∞–Ω–≥–∫–æ–∫)

        ### –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:
        - **–¢–æ–ø-3 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:** –ö–æ–ª–æ–º–±–æ (–®—Ä–∏-–õ–∞–Ω–∫–∞), –°—Ç–∞–º–±—É–ª (–¢—É—Ä—Ü–∏—è), –î—É–±–∞–π (–û–ê–≠)
        - –ú–æ—Å–∫–≤–∞ ‚Äî –≥–ª–∞–≤–Ω—ã–π –∞–≤–∏–∞—Ö–∞–± —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Ä–µ–π—Å–æ–≤
        - –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –º–µ–Ω—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –Ω–æ –∏–Ω–æ–≥–¥–∞ –≤—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã

        ### –ì–µ–æ–≥—Ä–∞—Ñ–∏—è —Å–ø—Ä–æ—Å–∞:
        - 34% ‚Äî –ø–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö (–ú–∞–ª—å–¥–∏–≤—ã, –®—Ä–∏-–õ–∞–Ω–∫–∞)
        - 33% ‚Äî –≥–æ—Ä–æ–¥—Å–∫–æ–π —Ç—É—Ä–∏–∑–º (–°—Ç–∞–º–±—É–ª, –î—É–±–∞–π)
        - 33% ‚Äî –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ (–¢–∞—à–∫–µ–Ω—Ç, –ë–µ–ª–≥—Ä–∞–¥)
        """)

    # 2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫)
    st.subheader("–°–æ–≤–µ—Ç—ã –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ (–º–∞–π 2026)")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info("""
        **–í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è**  
        ‚ñ™ –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–µ–∑–¥–æ–∫ (4-5 –¥–Ω–µ–π): –°—Ç–∞–º–±—É–ª, –¢–∞—à–∫–µ–Ω—Ç  
        ‚ñ™ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã: –ö–æ–ª–æ–º–±–æ + –ú–∞–ª—å–¥–∏–≤—ã  
        ‚ñ™ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç—É—Ä–∏–∑–º: –°–æ—á–∏, –ö–∞–≤–∫–∞–∑—Å–∫–∏–µ –ú–∏–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –í–æ–¥—ã
        """)
    
    with col2:
        st.success("""
        **–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –ø–µ—Ä–µ–ª—ë—Ç–∞—Ö**  
        ‚ñ™ –ë—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –∑–∞ 2-3 –º–µ—Å—è—Ü–∞  
        ‚ñ™ –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ü–µ–Ω—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤  
        ‚ñ™ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—ã–∫–æ–≤–æ—á–Ω—ã–µ —Ä–µ–π—Å—ã —á–µ—Ä–µ–∑ –î—É–±–∞–π/–°—Ç–∞–º–±—É–ª
        """)
    
    with col3:
        st.warning("""
        **–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏**  
        ‚ñ™ –î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫: –ê–∑–∏—è (–¢–æ–∫–∏–æ, –ë–∞–Ω–≥–∫–æ–∫)  
        ‚ñ™ –Æ–≥ –†–æ—Å—Å–∏–∏: –ø—Ä—è—ã–µ —Ä–µ–π—Å—ã –≤ –û–ê–≠  
        ‚ñ™ –£—Ä–∞–ª/–°–∏–±–∏—Ä—å: –¢—É—Ä—Ü–∏—è, –®—Ä–∏-–õ–∞–Ω–∫–∞
        """)

    # 3. –î–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∞–Ω–∞–ª–∏–∑–∞
    st.subheader("–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?")
    st.markdown("""
    - **–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:**  
      ‚ñ™ –°–µ–∑–æ–Ω–Ω—É—é –¥–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω (–ù–æ–≤—ã–π –≥–æ–¥ vs –º–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏)  
      ‚ñ™ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–µ–ª–µ–π –∏ –ø–∏—Ç–∞–Ω–∏—è –≤ –ø—É–Ω–∫—Ç–∞—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è  
      ‚ñ™ –†–µ–π—Ç–∏–Ω–≥–∏ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π –∏ —É–¥–æ–±—Å—Ç–≤–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    
    - **–£–≥–ª—É–±–∏—Ç—å –∞–Ω–∞–ª–∏–∑:**  
      ‚ñ™ –í–ª–∏—è–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–ª—ë—Ç–∞ –Ω–∞ —Ü–µ–Ω—ã  
      ‚ñ™ –ö–∞—Ä—Ç—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤  
      ‚ñ™ AI-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """)

    # 4. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    st.subheader("üìå –í–∞—à–µ –º–Ω–µ–Ω–∏–µ")
    user_feedback = st.selectbox(
        "–ö–∞–∫–æ–π —Ç–∏–ø –æ—Ç–¥—ã—Ö–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤ –º–∞–µ?",
        ["–ü–ª—è–∂–Ω—ã–π", "–ì–æ—Ä–æ–¥—Å–∫–æ–π", "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π", "–î—Ä—É–≥–æ–µ"]
    )
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"):
        st.toast(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤—ã–±–æ—Ä: {user_feedback}", icon="üëç")